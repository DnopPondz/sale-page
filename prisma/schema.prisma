generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String     @id @default(cuid())
  firstName       String
  lastName        String
  phone           String?
  email           String     @unique
  emailVerifiedAt DateTime?
  passwordHash    String?
  provider        String     @default("credentials")
  role            Role       @default(user)
  status          UserStatus @default(active)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  accounts  Account[]
  sessions  Session[]
  comments  Comment[]
  orders    Order[]
  auditLogs AuditLog[] @relation("AuditActor")

  // üëá ‡∏ù‡∏±‡πà‡∏á‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á Payment.admin (@relation("PaymentVerifiedBy"))
  paymentsVerified Payment[] @relation("PaymentVerifiedBy")
  Cart             Cart?
  Report           Report[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  user
  admin
}

enum UserStatus {
  active
  blocked
}

enum ProductStatus {
  active
  suspended
}

enum PromotionType {
  percent
  fixed
}

enum OrderStatus {
  PENDING
  AWAITING_CONFIRMATION
  ACCEPTED
  SHIPPED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  COD
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum PaymentReview {
  PENDING_REVIEW
  APPROVED
  REJECTED
}

enum ReportStatus {
  NEW
  CLOSED
}

model Category {
  id        String            @id @default(cuid())
  name_en   String
  name_th   String
  slug      String            @unique
  products  ProductCategory[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Product {
  id               String            @id @default(cuid())
  name_en          String
  name_th          String
  description_en   String
  description_th   String
  images           String[]
  basePrice        Decimal           @db.Decimal(12, 2)
  status           ProductStatus     @default(active)
  badgeNew         Boolean           @default(false)
  badgeRecommended Boolean           @default(false)
  options          ProductOption[]
  promotions       Promotion[]
  categories       ProductCategory[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  CartItem         CartItem[]
  OrderItem        OrderItem[]
  Comment          Comment[]
  Report           Report[]
}

model ProductCategory {
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

model ProductOption {
  id         String  @id @default(cuid())
  productId  String
  key        String
  value      String
  extraPrice Decimal @db.Decimal(12, 2)
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Promotion {
  id        String        @id @default(cuid())
  productId String
  type      PromotionType
  amount    Decimal       @db.Decimal(12, 2)
  startsAt  DateTime
  endsAt    DateTime
  active    Boolean       @default(true)
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id     String     @id @default(cuid())
  userId String     @unique
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]
}

model CartItem {
  id                String   @id @default(cuid())
  cartId            String
  productId         String
  optionSelections  Json
  qty               Int
  unitPriceSnapshot Decimal  @db.Decimal(12, 2)
  createdAt         DateTime @default(now())
  cart              Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product           Product  @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model Order {
  id            String        @id @default(cuid())
  userId        String
  total         Decimal       @db.Decimal(12, 2)
  discount      Decimal       @default(0) @db.Decimal(12, 2)
  grandTotal    Decimal       @db.Decimal(12, 2)
  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(UNPAID)
  shippingInfo  Json?
  notes         String?
  items         OrderItem[]
  payment       Payment?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id                String  @id @default(cuid())
  orderId           String
  productId         String
  nameSnapshot      String
  optionSnapshot    Json
  qty               Int
  unitPriceSnapshot Decimal @db.Decimal(12, 2)
  lineTotal         Decimal @db.Decimal(12, 2)
  order             Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product           Product @relation(fields: [productId], references: [id], onDelete: Restrict)
}

model Payment {
  id         String        @id @default(cuid())
  orderId    String        @unique
  method     PaymentMethod
  slipUrl    String?
  bankRef    String?
  verifiedBy String?
  verifiedAt DateTime?
  status     PaymentReview @default(PENDING_REVIEW)
  createdAt  DateTime      @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  admin User? @relation("PaymentVerifiedBy", fields: [verifiedBy], references: [id])
}

model Comment {
  id         String   @id @default(cuid())
  userId     String
  productId  String
  rating     Int
  content    String
  adminReply String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Report {
  id             String       @id @default(cuid())
  userId         String
  productId      String?
  title          String
  description    String
  status         ReportStatus @default(NEW)
  resolutionNote String?
  createdAt      DateTime     @default(now())
  closedAt       DateTime?
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  product        Product?     @relation(fields: [productId], references: [id])
}

model AuditLog {
  id          String   @id @default(cuid())
  actorUserId String
  action      String
  entity      String
  entityId    String
  diff        Json
  createdAt   DateTime @default(now())
  actor       User     @relation("AuditActor", fields: [actorUserId], references: [id])
}
